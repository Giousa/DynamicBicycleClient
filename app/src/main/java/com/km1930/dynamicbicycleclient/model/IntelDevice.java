// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: device.proto at 5:1
package com.km1930.dynamicbicycleclient.model;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class IntelDevice extends Message<IntelDevice, IntelDevice.Builder> {
  public static final ProtoAdapter<IntelDevice> ADAPTER = new ProtoAdapter_IntelDevice();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_DEVICEID = "";

  public static final Integer DEFAULT_SPEED = 0;

  public static final Integer DEFAULT_ANGLE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String deviceId;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer speed;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer angle;

  public IntelDevice(String deviceId, Integer speed, Integer angle) {
    this(deviceId, speed, angle, ByteString.EMPTY);
  }

  public IntelDevice(String deviceId, Integer speed, Integer angle, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.deviceId = deviceId;
    this.speed = speed;
    this.angle = angle;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.deviceId = deviceId;
    builder.speed = speed;
    builder.angle = angle;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof IntelDevice)) return false;
    IntelDevice o = (IntelDevice) other;
    return unknownFields().equals(o.unknownFields())
        && deviceId.equals(o.deviceId)
        && Internal.equals(speed, o.speed)
        && Internal.equals(angle, o.angle);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + deviceId.hashCode();
      result = result * 37 + (speed != null ? speed.hashCode() : 0);
      result = result * 37 + (angle != null ? angle.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", deviceId=").append(deviceId);
    if (speed != null) builder.append(", speed=").append(speed);
    if (angle != null) builder.append(", angle=").append(angle);
    return builder.replace(0, 2, "IntelDevice{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<IntelDevice, Builder> {
    public String deviceId;

    public Integer speed;

    public Integer angle;

    public Builder() {
    }

    public Builder deviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public Builder speed(Integer speed) {
      this.speed = speed;
      return this;
    }

    public Builder angle(Integer angle) {
      this.angle = angle;
      return this;
    }

    @Override
    public IntelDevice build() {
      if (deviceId == null) {
        throw Internal.missingRequiredFields(deviceId, "deviceId");
      }
      return new IntelDevice(deviceId, speed, angle, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_IntelDevice extends ProtoAdapter<IntelDevice> {
    ProtoAdapter_IntelDevice() {
      super(FieldEncoding.LENGTH_DELIMITED, IntelDevice.class);
    }

    @Override
    public int encodedSize(IntelDevice value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.deviceId)
          + (value.speed != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.speed) : 0)
          + (value.angle != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.angle) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, IntelDevice value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.deviceId);
      if (value.speed != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.speed);
      if (value.angle != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.angle);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public IntelDevice decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.deviceId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.speed(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.angle(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public IntelDevice redact(IntelDevice value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
